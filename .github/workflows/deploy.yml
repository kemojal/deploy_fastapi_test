name: Deploy FastAPI to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Debug SSH Setup
        run: |
          echo "SSH_AUTH_SOCK: $SSH_AUTH_SOCK"
          echo "SSH_AGENT_PID: $SSH_AGENT_PID"
          ssh-add -l
          echo "Testing SSH connection..."
          ssh -v -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} "echo 'SSH connection successful'"

      - name: Copy files to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ~/deploy_fastapi_test || mkdir ~/deploy_fastapi_test && cd ~/deploy_fastapi_test
            rm -rf ./*
          EOF
          scp -r ./* ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:~/deploy_fastapi_test

      - name: Deploy with Docker
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            cd ~/deploy_fastapi_test
            
            # Stop and remove existing container
            docker stop fastapi-app || true
            docker rm fastapi-app || true
            
            # Kill any process using port 8000
            sudo fuser -k 8000/tcp || true
            
            # Allow port 3000 in firewall
            sudo ufw allow 3000/tcp
            
            # Build new image
            docker build -t fastapi-app .
            
            # Run the container with a different port
            docker run -d --name fastapi-app -p 3000:8000 fastapi-app
            
            # Print debugging information
            echo "Container status:"
            docker ps
            echo "Container logs:"
            docker logs fastapi-app
            echo "Network information:"
            netstat -tulpn | grep -E ':3000|:8000'
            echo "Firewall status:"
            sudo ufw status
            
            # Print the URL
            echo "Application should be running on:"
            echo "http://$(hostname -I | awk '{print $1}'):3000"
            
            # Test the connection locally
            echo "Testing local connection..."
            curl -v http://localhost:3000/
          EOF
